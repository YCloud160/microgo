package main

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

// Paths for packages used by code generated in this file,
// relative to the import_prefix of the generator.Generator.
const (
	version        = "1.0.0"
	protoPackage   = protogen.GoImportPath("google.golang.org/protobuf/proto")
	microgoPackage = protogen.GoImportPath("github.com/YCloud160/microgo")
	contextPackage = protogen.GoImportPath("context")
	fmtPackage     = protogen.GoImportPath("fmt")
)

// GenerateMicroGoFile generates a _microgo.pb.go file containing microgo service definitions.
func GenerateMicroGoFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_microgo.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-microgo. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-microgo v", version)
	g.P("// - protoc             ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	mg := microgo{}
	mg.Init(g)
	mg.Generate(file)
	return g
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

// microgo is an implementation of the Go protocol buffer compiler's
// plugin architecture.  It generates bindings for tars rpc suppormg.
type microgo struct {
	gen *protogen.GeneratedFile
}

// Name returns the name of this plugin
func (mg *microgo) Name() string {
	return "microgo"
}

// Init initializes the plugin.
func (mg *microgo) Init(gen *protogen.GeneratedFile) {
	mg.gen = gen
}

// upperFirstLatter make the first charter of given string  upper class
func upperFirstLatter(s string) string {
	if len(s) == 0 {
		return ""
	}
	if len(s) == 1 {
		return strings.ToUpper(string(s[0]))
	}
	return strings.ToUpper(string(s[0])) + s[1:]
}

func lowerFirstLatter(s string) string {
	if len(s) == 0 {
		return ""
	}
	if len(s) == 1 {
		return strings.ToLower(string(s[0]))
	}
	return strings.ToLower(string(s[0])) + s[1:]
}

// GenerateImports generates the import declaration for this file.
func (mg *microgo) GenerateImports(file *protogen.File) {
	mg.gen.QualifiedGoIdent(microgoPackage.Ident("Encoder"))
	mg.gen.QualifiedGoIdent(protoPackage.Ident("Message"))
	mg.gen.QualifiedGoIdent(contextPackage.Ident("Context"))
	mg.gen.QualifiedGoIdent(fmtPackage.Ident("Errorf"))
}

// P forwards to g.gen.P.
func (mg *microgo) P(args ...interface{}) { mg.gen.P(args...) }

// Generate generates code for the services in the given file.
func (mg *microgo) Generate(file *protogen.File) {
	mg.GenerateImports(file)

	mg.P()

	for i, service := range file.Services {
		mg.generateService(file, service, i)
	}
}

// generateService generates all the code for the named service
func (mg *microgo) generateService(file *protogen.File, service *protogen.Service, index int) {
	mg.generateServerInterface(service)

	// generate the method
	mg.generateMethod(service)

	mg.generateClientCode(service)
}

func (mg *microgo) generateServerInterface(service *protogen.Service) {
	serviceName := upperFirstLatter(service.GoName)
	// generate the server interface
	mg.P(fmt.Sprintf("type I%sServer interface{", serviceName))
	for _, method := range service.Methods {
		mg.P(fmt.Sprintf("%s (ctx context.Context, input *%s) (output *%s, err error)",
			upperFirstLatter(method.GoName), mg.gen.QualifiedGoIdent(method.Input.GoIdent), mg.gen.QualifiedGoIdent(method.Output.GoIdent)))
	}
	mg.P("}")
	mg.P()

	// generate the context interface
	mg.P(fmt.Sprintf("type Nop%sServerImpl struct{}", serviceName))
	for _, method := range service.Methods {
		mg.P(fmt.Sprintf(`func (*Nop%sServerImpl)%s (ctx context.Context, input *%s) (output *%s, err error) {
			return nil, fmt.Errorf("method %s not implement") 
			}`,
			serviceName, upperFirstLatter(method.GoName), mg.gen.QualifiedGoIdent(method.Input.GoIdent), mg.gen.QualifiedGoIdent(method.Output.GoIdent), upperFirstLatter(method.GoName)))
		mg.P()
	}
	mg.P()
}

func (mg *microgo) generateClientCode(service *protogen.Service) {
	serviceName := upperFirstLatter(service.GoName)

	mg.P(fmt.Sprintf(`// %sClient implement
		type %sClient struct {
			client *microgo.Client
		}
	`, serviceName, serviceName))

	mg.P(fmt.Sprintf(`func New%sClient(name string, options ...microgo.ClientOption) *%sClient {
		client := microgo.NewClient(name, options...)
		return &%sClient{client: client}
	}`, serviceName, serviceName, serviceName))
	mg.P()

	for _, method := range service.Methods {
		mg.generateClientMethod(serviceName, method)
		mg.P()
	}
}

func (mg *microgo) generateClientMethod(serviceName string, method *protogen.Method) {
	mg.P(fmt.Sprintf(`func (client *%sClient) %s(ctx context.Context, req *%s) (*%s, error) {
			input, err := proto.Marshal(req)
			if err != nil {
				return nil, err
			}
			out, err := client.client.Call(ctx, "", "proto", "%s", input)
			if err != nil {
				return nil, err
			}
			resp := %s{}
			if err := proto.Unmarshal(out, &resp); err != nil {
				return nil, err
			}
			return &resp, nil
		}`, serviceName, method.GoName, method.Input.GoIdent.GoName, method.Output.GoIdent.GoName, method.GoName, method.Output.GoIdent.GoName))
}

//func (mg *microgo) generateClientBroadcastMethod(serviceName string, method *protogen.Method) {
//	mg.P(fmt.Sprintf(`func (client *%sClient) Broadcast%s(ctx context.Context, req *%s) (*%s, map[string]error) {
//			input, err := proto.Marshal(req)
//			if err != nil {
//				return nil, err
//			}
//			out, errs := client.client.BroadcastCall(ctx, "", "proto", "%s", input)
//			if errs != nil {
//				return nil, errs
//			}
//			resp := %s{}
//			if err := proto.Unmarshal(out, &resp); err != nil {
//				return nil, err
//			}
//			return &resp, nil
//		}`, serviceName, method.GoName, method.Input.GoIdent.GoName, method.Output.GoIdent.GoName, method.GoName, method.Output.GoIdent.GoName))
//}

func (mg *microgo) generateMethod(service *protogen.Service) {
	serviceName := upperFirstLatter(service.GoName)
	mg.P(fmt.Sprintf(`// %sCall is used to call the implement of the defined method.
	func %sCall(ctx context.Context, impl any, enc microgo.Encoder, method string, input []byte) (out []byte, err error) {
		obj := impl.(I%sServer)
		_ = obj
		switch method {`, serviceName, serviceName, serviceName))
	for _, method := range service.Methods {
		mg.P(fmt.Sprintf(`case "%s":
			var req %s
			if err = enc.Unmarshal(input, &req); err != nil {
				return nil, err
			}
			resp, err := obj.%s(ctx, &req)
			if err != nil {
				return nil, err
			}
			out, err = enc.Marshal(resp)
			if err != nil {
				return nil, err
			}`, method.GoName, mg.gen.QualifiedGoIdent(method.Input.GoIdent), upperFirstLatter(method.GoName)))
	}
	mg.P("default:")
	mg.P("return nil, fmt.Errorf(\"method %s not implement\", method)")
	mg.P("}")
	mg.P("return out, nil")
	mg.P("}")
	mg.P()
}
